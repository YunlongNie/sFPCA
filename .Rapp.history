abline(a=0,b=1,col=2,width=3)
abline(a=0,b=1,col=2,lwd=3)
rnorm(2,sd=1)
x = c(-1,1)
mu = x
set.seed(1)
(y = mu  +rnorm(2,sd=1))
y-mu
set.seed(2)
(y = mu  +rnorm(2,sd=1))
y-mu
set.seed(3)
(y = mu  +rnorm(2,sd=1))
y-mu
points(x,y,)
abline(y~x)
abline(lm(y~x))
lm(y~x)
lm(y~x)%>%predict(newdata=data.frame(x=0))
ypred = lm(y~x)%>%predict(newdata=data.frame(x=0))
yhat = lm(y~x)%>%predict(newdata=data.frame(x=0))
points(x=0,y=yhat)
points(x=0,y=0,col=2)
abline(a=0,b=1,col=2,cex=2)
points(x=0,y=0,col=2,cex=2)
x = c(-0.5,0.5)#
plot(x=0,y=0,type="n",xlim=c(-2,2),ylim=c(-2,2))#
abline(a=0,b=1,col=2,lwd=3)#
#
x = c(-1,1)#
mu = x#
set.seed(3)#
(y = mu  +rnorm(2,sd=1))#
#
points(x,y)#
abline(lm(y~x))#
yhat = lm(y~x)%>%predict(newdata=data.frame(x=0))#
#
points(x=0,y=yhat)#
points(x=0,y=0,col=2,cex=2)
points(x=0,y=0,col=2,cex=1.5)
set.seed(4)
(y = mu  +rnorm(2,sd=1))
set.seed(4)
(ynew = mu  +rnorm(2,sd=1))
set.seed(4)
(ynew = 0  +rnorm(1,sd=1))
points(x=0,y=ynew)
points(x=0,y=ynew,pch=15)
points(x=0,y=ynew,pch=15,col=4)
x = c(-0.5,0.5)#
plot(x=0,y=0,type="n",xlim=c(-2,2),ylim=c(-2,2))#
abline(a=0,b=1,col=2,lwd=3)#
#
x = c(-1,1)#
mu = x#
set.seed(3)#
(y = mu  +rnorm(2,sd=1))#
#
points(x,y)#
abline(lm(y~x))#
yhat = lm(y~x)%>%predict(newdata=data.frame(x=0))#
#
points(x=0,y=yhat)#
points(x=0,y=0,col=2,cex=1.5)#
#
set.seed(4)#
(ynew = 0  +rnorm(1,sd=1))#
#
points(x=0,y=ynew,pch=15,col=4)
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,3))
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,3),type='n')
curve(dnorm,from=-4,4)
curve(dnorm,from=-4,4,col=2)
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,3))
curve(dnorm,from=-4,4,col=2,add=TRUE)
curve(dnorm,from=-4,4,col=2,add=TRUE)plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")
curve(dnorm,from=-4,4,col=2,add=TRUE)
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,1),type="n")#
curve(dnorm,from=-4,4,col=2,add=TRUE)
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
curve(dnorm,from=-4,4,col=2,add=TRUE)
curve(dnorm(.,mean=0.5,sd=0.1),from=-4,4,col=2,add=TRUE)
curve(function(x) dnorm(x,mean=0.5,sd=0.1),from=-4,4,col=2,add=TRUE)
tempx = function(x) dnorm(x,mean=0.5,sd=0.1)#
curve(tempx,from=-4,4,col=2,add=TRUE)
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=2,add=TRUE)
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
curve(dnorm,from=-4,4,col=1,add=TRUE)#
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=4,add=TRUE)
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
abline(v=0,lty=2,col=2)#
curve(dnorm,from=-4,4,col=1,add=TRUE)#
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=4,add=TRUE)
legend("topright",col=c(1,3))
legend("topright",col=c(1,3),legend=c('unbiased, large variance','biased small variance'))
legend("topright",col=c(1,3),lty=1,legend=c('unbiased, large variance','biased small variance'))
legend("topright",col=c(1,2),lty=1,legend=c('unbiased, large variance','biased small variance'))
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
abline(v=0,lty=2,col=2)#
curve(dnorm,from=-4,4,col=1,add=TRUE)#
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=4,add=TRUE)#
#
legend("topright",col=c(1,2),lty=1,legend=c('unbiased, large variance','biased small variance'))
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
abline(v=0,lty=2,col=2)#
curve(dnorm,from=-4,4,col=1,add=TRUE)#
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=4,add=TRUE)#
#
legend("topright",col=c(1,3),lty=1,legend=c('unbiased, large variance','biased small variance'))
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
abline(v=0,lty=2,col=2)#
curve(dnorm,from=-4,4,col=1,add=TRUE)#
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=4,add=TRUE)#
#
legend("topright",col=c(1,4),lty=1,legend=c('unbiased, large variance','biased small variance'))
legend("topright",col=c(1,4),lty=1,lwd=2,legend=c('unbiased, large variance','biased small variance'))
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
abline(v=0,lty=2,col=2)#
curve(dnorm,from=-4,4,col=1,add=TRUE,lwd=1)#
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=4,add=TRUE,lwd=2)#
#
legend("topright",col=c(1,4),lty=1,lwd=2,legend=c('unbiased, large variance','biased small variance'))
pdf('tradeoff.pdf')#
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
abline(v=0,lty=2,col=2)#
curve(dnorm,from=-4,4,col=1,add=TRUE,lwd=1)#
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=4,add=TRUE,lwd=2)#
#
legend("topright",col=c(1,4),lty=1,lwd=2,legend=c('unbiased, large variance','biased small variance'))#
dev.off()
pdf('/Users/joha/Dropbox/SFU/TA/STAT350/9/tradeoff.pdf')#
plot(x=0,y=0,xlim=c(-4,4),ylim=c(0,2),type="n")#
abline(v=0,lty=2,col=2)#
curve(dnorm,from=-4,4,col=1,add=TRUE,lwd=1)#
tempx = function(x) dnorm(x,mean=0.5,sd=0.3)#
curve(tempx,from=-4,4,col=4,add=TRUE,lwd=2)#
#
legend("topright",col=c(1,4),lty=1,lwd=2,legend=c('unbiased, large variance','biased small variance'))#
dev.off()
x  =c(-1,1)#
(y= x + rnorm(2))#
#
plot(x,y,col=2)#
abline(a=0,b=1)#
abline(lm(y~x),col=2)
x  =c(-1,1)#
(y= x + rnorm(2))#
#
plot(x,y,col=1)#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=2)
x  =c(-1,1)#
(y= x + rnorm(2))#
#
plot(x,y,col=1)#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)
for ( i  in 1:10)#
{#
(y= x + rnorm(2))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
# plan b#
x  =c(-1,1)#
(y= x + rnorm(2))#
#
plot(x,y,col=1)#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(2))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
x  =c(-1,1)#
(y= x + rnorm(2))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(2))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
quartz('three points')#
x  =c(-1,0,1)#
(y= x + rnorm(3))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(3))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
quartz('three points')#
x  =c(-1,0,1)#
(y= x + rnorm(10))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(10))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
quartz('three points')#
x  =seq(-1,1,len=10)#
(y= x + rnorm(10))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(10))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
quartz('three points')#
x  =seq(-1,1,len=100)#
(y= x + rnorm(100))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(100))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
# plan b#
x  =c(-1,1)#
(y= x + rnorm(2,sd=2))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(2,sd=2))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
quartz('three points')#
x  =seq(-1,1,len=100)#
(y= x + rnorm(100,sd=2))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(100,sd=2))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
quartz('three points')#
x  =seq(-1,1,len=10)#
(y= x + rnorm(10,sd=2))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(10,sd=2))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
x  =c(-3,3)#
(y= x + rnorm(2,sd=2))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(2,sd=2))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
quartz('three points')#
x  =seq(-3,3,len=10)#
(y= x + rnorm(10,sd=2))#
#
plot(x,y,col=1,xlim=c(-5,5),ylim=c(-5,5))#
abline(a=0,b=1,col=2)#
abline(lm(y~x),col=1)#
#
# dev.off()#
for ( i  in 1:10)#
{#
(y= x + rnorm(10,sd=2))#
points(x,y,col=1)#
abline(lm(y~x),col=1)#
}
x  =c(-10,10)#
# plan a #
(y= x + rnorm(2))#
plot(x,y,xlim=c(-15,15),ylim=c(-15,15))#
abline(lm(y~x))#
x  =c(-10,10)#
(y= x + rnorm(2))#
points(x,y)#
abline(lm(y~x))#
#
# plan b#
x  =c(-1,1)#
(y= x + rnorm(2))#
points(x,y,col=2)#
abline(lm(y~x),col=2)#
# dev.off()
x = seq(0,1,len=2)#
y = x + rnorm(length(x),sd=2)#
#
lm(y~x)%>%predict(newdata=data.frame(x=x))
lm(y~x)%>%predict(newdata=data.frame(x=x))%>%as.vector
yhat= matrix(NA,ncol=2,nrow=100)#
for (i in 1:100)#
{#
x = seq(0,1,len=2)#
y = x + rnorm(length(x),sd=2)#
#
yhat[i,] = lm(y~x)%>%predict(newdata=data.frame(x=x))%>%as.vector#
#
}
head(yhat)
boxplot(yhat)
yhat= matrix(NA,ncol=10,nrow=100)#
for (i in 1:100)#
{#
x = seq(0,1,len=10)#
y = x + rnorm(length(x),sd=2)#
#
yhat[i,] = lm(y~x)%>%predict(newdata=data.frame(x=x))%>%as.vector#
#
}
boxplot(yhat)
quartz('new')#
#
boxplot(yhat)
yhat= matrix(NA,ncol=2,nrow=100)#
for (i in 1:100)#
{#
x = seq(0,1,len=2)#
y = x + rnorm(length(x),sd=2)#
#
yhat[i,] = lm(y~x)%>%predict(newdata=data.frame(x=x))%>%as.vector#
#
}
boxplot(yhat)
mean(apply(yhat,2,var))
yhat= matrix(NA,ncol=10,nrow=100)#
for (i in 1:100)#
{#
x = seq(0,1,len=10)#
y = x + rnorm(length(x),sd=2)#
#
yhat[i,] = lm(y~x)%>%predict(newdata=data.frame(x=x))%>%as.vector#
#
}#
#
mean(apply(yhat,2,var))
apply(yhat,2,var)
apply(yhat,2,var))
library(flyfuns)#
time_obs = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 7, 8, 9, #
10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)#
data(fdlist) #
#
gene_target = "Myo31DF" # the target gene name #
yfd = fdlist[[which(names(fdlist)==matched_id(gene_target)$CG_ID)]] #
xfdlist  = fdlist #
xnames = names(xfdlist)#
yname = xnames[which(names(fdlist)==matched_id(gene_target)$CG_ID)]#
# each element in the xfdlist is a fd object #
# step 1 specify the tuning parameter grid#
parameter_grid = expand.grid(lambda=10^c(-2,-3),gamma=10^c(-2,-3))#
#
# step 2 run the estimation function for each tuning parameter set#
res_all = parameter_grid%>%rowwise()%>%do(lambda=.$lambda[1],gamma=.$gamma[1],res = regfun_slos(xfdlist,yfd,time_obs,yname,xnames,lambda=.$lambda[1],gamma=.$gamma[1],verbose=FALSE))#
#
# step 3 select the optimal tuning parameter based on AICc#
#
optimal_index=  which.min(sapply(res_all$res, function(x) x$AICc))#
#
# step 4 extract the regulation function estimation#
#
res = res_all$res[optimal_index]#
#
flyids = matched_id(xnames)%>%dplyr::select(CG_ID,genesymbol)%>%dplyr::rename(xname=CG_ID) # merge the CG_ID with genesymbols #
#
regfd = res[[1]]$estimated_fd%>%left_join(.,flyids,by="xname")#
#
regfuns = regfd$regfd # regfuns contains all the estimated regulation functions
library(devtools)#
library(dplyr)#
library(fda)
# this R pacakge is available on https://github.com/YunlongNie/flyfuns#
install_github('YunlongNie/flyfuns')#
#
library(flyfuns)#
time_obs = c(0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6, 7, 8, 9, #
10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)#
data(fdlist) #
#
gene_target = "Myo31DF" # the target gene name #
yfd = fdlist[[which(names(fdlist)==matched_id(gene_target)$CG_ID)]] #
xfdlist  = fdlist #
xnames = names(xfdlist)#
yname = xnames[which(names(fdlist)==matched_id(gene_target)$CG_ID)]#
# each element in the xfdlist is a fd object #
# step 1 specify the tuning parameter grid#
parameter_grid = expand.grid(lambda=10^c(-2,-3),gamma=10^c(-2,-3))#
#
# step 2 run the estimation function for each tuning parameter set#
res_all = parameter_grid%>%rowwise()%>%do(lambda=.$lambda[1],gamma=.$gamma[1],res = regfun_slos(xfdlist,yfd,time_obs,yname,xnames,lambda=.$lambda[1],gamma=.$gamma[1],verbose=FALSE))#
#
# step 3 select the optimal tuning parameter based on AICc#
#
optimal_index=  which.min(sapply(res_all$res, function(x) x$AICc))#
#
# step 4 extract the regulation function estimation#
#
res = res_all$res[optimal_index]#
#
flyids = matched_id(xnames)%>%dplyr::select(CG_ID,genesymbol)%>%dplyr::rename(xname=CG_ID) # merge the CG_ID with genesymbols #
#
regfd = res[[1]]$estimated_fd%>%left_join(.,flyids,by="xname")#
#
regfuns = regfd$regfd # regfuns contains all the estimated regulation functions
.Platform
plot(regfuns[[i]],xlab="gene expression",ylab="regulation function",main=regfd$genesymbol[i])
i=5#
quartz() # run x11() if you are using a window machine#
plot(regfuns[[i]],xlab="gene expression",ylab="regulation function",main=regfd$genesymbol[i])#
#
# this demo
i=1
i=5#
quartz() # run x11() if you are using a window machine#
plot(regfuns[[i]],xlab="gene expression",ylab="regulation function",main=regfd$genesymbol[i])#
#
# this demoregfd$genesymbol
regfd$genesymbol
par(mfrow=c(3,1))#
quartz()#
for (i in c(5,14,19))#
 # run x11() if you are using a window machine#
{#
plot(regfuns[[i]],xlab="gene expression",ylab="regulation function",main=regfd$genesymbol[i])#
}#
# this demo c
quartz()#
par(mfrow=c(3,1))#
#
for (i in c(5,14,19))#
 # run x11() if you are using a window machine#
{#
plot(regfuns[[i]],xlab="gene expression",ylab="regulation function",main=regfd$genesymbol[i])#
}#
# this demo code is also available by runing #
# demo(myo31DF,package = "flyfuns")
quartz()#
par(mfrow=c(1,3))#
#
for (i in c(5,14,19))#
 # run x11() if you are using a window machine#
{#
plot(regfuns[[i]],xlab="gene expression",ylab="regulation function",main=regfd$genesymbol[i])#
}
x1 = rnorm(100)#
x2 = rnorm(100)#
beta1 = 1#
beta2 = 1#
beta0 = 0#
y = beta0 + beta1*x1+beta2*x2  + rnorm(100)#
library(dplyr)#
lm(y~x)%>%fitted
lm(y~x1+x2)%>%fitted
beta0 + beta1*x1+beta2*x2
(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
mean(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
x3 = rnorm(100)
mean(lm(y~x1+x2+x3)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
lm(y~x1+x2+x3)
lm(y~x1+x2+x3)%>%fitted
x1 = rnorm(5)#
x2 = rnorm(5)#
x3 = rnorm(5)#
beta1 = 1#
beta2 = 1#
beta0 = 0#
y = beta0 + beta1*x1+beta2*x2  + rnorm(100)#
library(dplyr)#
#
mean(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2#
#
mean(lm(y~x1+x2+x3)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
x1 = rnorm(5)#
x2 = rnorm(5)#
x3 = rnorm(5)#
beta1 = 1#
beta2 = 1#
beta0 = 0#
y = beta0 + beta1*x1+beta2*x2  + rnorm(5)#
library(dplyr)#
#
mean(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2#
#
mean(lm(y~x1+x2+x3)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
lm(y~x1+x2+x3)
x1 = rnorm(5)#
x2 = rnorm(5)#
x3 = rnorm(5)#
beta1 = 1#
beta2 = 1#
beta0 = 0#
#
y = beta0 + beta1*x1+beta2*x2  + rnorm(5)#
library(dplyr)#
#
mean(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2#
#
mean(lm(y~x1+x2+x3)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
mean(lm(y~x1+x2)
lm(y~x1+x2)
x1 = rnorm(5)#
x2 = rnorm(5)#
x3 = rnorm(5)#
beta1 = 1#
beta2 = 1#
beta0 = 0#
#
y = beta0 + beta1*x1+beta2*x2  + rnorm(5)#
library(dplyr)#
#
mean(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2#
#
mean(lm(y~x1+x2+x3)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
beta0 + beta1*x1+beta2*x2
x1 = rnorm(2)#
x2 = rnorm(2)#
x3 = rnorm(2)#
beta1 = 1#
beta2 = 1#
beta0 = 0#
#
y = beta0 + beta1*x1+beta2*x2  + rnorm(5)#
library(dplyr)#
#
mean(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2#
#
mean(lm(y~x1+x2+x3)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
x1 = rnorm(2)#
x2 = rnorm(2)#
x3 = rnorm(2)#
beta1 = .1#
beta2 = .1#
beta0 = 0#
#
y = beta0 + beta1*x1+beta2*x2  + rnorm(5)#
library(dplyr)#
#
mean(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2#
#
mean(lm(y~x1+x2+x3)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
x1 = rnorm(5)#
x2 = rnorm(5)#
x3 = rnorm(5)#
beta1 = .1#
beta2 = .1#
beta0 = 0#
#
y = beta0 + beta1*x1+beta2*x2  + rnorm(5)#
library(dplyr)#
#
mean(lm(y~x1+x2)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2#
#
mean(lm(y~x1+x2+x3)%>%fitted - (beta0 + beta1*x1+beta2*x2))^2
mtcars
b<-regsubsets(mpg~.,data=swiss)
library(leaps)
install.packages('leaps')
library(leaps)
b<-regsubsets(mpg~.,data=swiss)
b<-regsubsets(mpg~.,data=mtcars)
summary(b)
summ = summary(b)
summ$outmat
summ$bic
allsubsets<-regsubsets(mpg~.,data=mtcars)
summary(allsubsets)
summ_res = summary(allsubsets)
summ_res$which
summ_res$rsq
summ_res$bic
summ_res$obj
summ_res$which
matwhich = summ_res$which
rowSums(matwhich[,-1])
colnames(matwhich[,-1])
colnames(matwhich)[matwhich[i,]]
i=1
colnames(matwhich)[matwhich[i,]]
colnames(matwhich)[matwhich[i,]][-1]
(formula = as.formula(sprintf("mpg~%s",xvar)))
xvar = colnames(matwhich)[matwhich[i,]][-1]
(formula = as.formula(sprintf("mpg~%s",xvar)))
lm(formula,data=mtcars)
lm(formula,data=mtcars)%>%extractAIC
lm(formula,data=mtcars)%>%extractAIC[,2]
AIC = lm(formula,data=mtcars)%>%extractAIC
AIC
AIC = c()#
for (i in 1:8){#
xvar = colnames(matwhich)[matwhich[i,]][-1]#
(formula = as.formula(sprintf("mpg~%s",xvar)))#
print(formula)#
temp = lm(formula,data=mtcars)%>%extractAIC#
AIC[i] = temp[2]#
#
}
i=2
colnames(matwhich)[matwhich[i,]
colnames(matwhich)[matwhich[i,]]
xvar = colnames(matwhich)[matwhich[i,]][-1]
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="~")
xvar
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="+")
xvar
AIC = c()#
for (i in 1:8){#
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="+")#
#
(formula = as.formula(sprintf("mpg~%s",xvar)))#
print(formula)#
temp = lm(formula,data=mtcars)%>%extractAIC#
AIC[i] = temp[2]#
#
}
AIC
for (i in 1:8){#
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="+")#
(formula = as.formula(sprintf("mpg~%s",xvar)))#
print(formula)#
temp = lm(formula,data=mtcars)%>%extractAIC#
AIC[i] = temp[2]#
print(AIC[i])#
}
cat("AIC:" AIC[i]),"\n")
matwhich = summ_res$which#
rowSums(matwhich[,-1])#
AIC = c()#
for (i in 1:8){#
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="+")#
(formula = as.formula(sprintf("mpg~%s",xvar)))#
print(formula)#
temp = lm(formula,data=mtcars)%>%extractAIC#
AIC[i] = temp[2]#
cat("AIC:" AIC[i]),"\n")#
}
matwhich = summ_res$which#
rowSums(matwhich[,-1])#
AIC = c()#
for (i in 1:8){#
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="+")#
(formula = as.formula(sprintf("mpg~%s",xvar)))#
print(formula)#
temp = lm(formula,data=mtcars)%>%extractAIC#
AIC[i] = temp[2]#
cat("AIC:",AIC[i]),"\n")#
}
matwhich = summ_res$which#
rowSums(matwhich[,-1])#
AIC = c()#
for (i in 1:8){#
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="+")#
(formula = as.formula(sprintf("mpg~%s",xvar)))#
print(formula)#
temp = lm(formula,data=mtcars)%>%extractAIC#
AIC[i] = temp[2]#
cat("AIC:",AIC[i],"\n")#
}
for (i in 1:8){#
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="+")#
(formula = as.formula(sprintf("mpg~%s",xvar)))#
print(formula)#
temp = lm(formula,data=mtcars)%>%extractAIC#
AIC[i] = temp[2]#
cat("AIC:",AIC[i],"\n")#
temp = lm(formula,data=mtcars)%>%extractAIC(.,k=log(nrow(mtcars)))#
BIC[i] = temp[2]#
cat("BIC:",BIC[i],"\n")#
}
matwhich = summ_res$which#
rowSums(matwhich[,-1])#
AIC = c()#
BIC = c()#
for (i in 1:8){#
xvar = paste0(colnames(matwhich)[matwhich[i,]][-1],collapse="+")#
(formula = as.formula(sprintf("mpg~%s",xvar)))#
print(formula)#
temp = lm(formula,data=mtcars)%>%extractAIC#
AIC[i] = temp[2]#
cat("AIC:",AIC[i],"\n")#
temp = lm(formula,data=mtcars)%>%extractAIC(.,k=log(nrow(mtcars)))#
BIC[i] = temp[2]#
cat("BIC:",BIC[i],"\n")#
}
which.min(AIC)
which.min(BIC)
y = rnorm(10)#
xmat = matrix(NA,ncol=10,ncol=10)#
for (i in 1:10){#
	xmat[,i] = rnorm(10)#
}
y = rnorm(10)#
xmat = matrix(NA,ncol=10,nrow=10)#
for (i in 1:10){#
	xmat[,i] = rnorm(10)#
}
lm(y~xmat)
y = rnorm(10)#
xmat = matrix(NA,ncol=9,nrow=10)#
for (i in 1:9){#
	xmat[,i] = rnorm(10)#
}#
#
lm(y~xmat)
lm(y~xmat)%>%redisuals
lm(y~xmat)%>%resid
y = rnorm(10)#
xmat = matrix(NA,ncol=9,nrow=10)#
for (i in 1:9){#
	xmat[,i] = rnorm(10)#
}#
#
lm(y~xmat)#
#
lm(y~xmat)%>%resid
mean((ynew - lm(y~xmat)%>%resid)^2)
ynew  = rnorm(10)#
#
mean((ynew - lm(y~xmat)%>%resid)^2)
mean((ynew - lm(y~xmat)%>%fitted)^2)#
#
plot(ynew,lm(y~xmat)%>%fitted)
y = rnorm(10)#
xmat = matrix(NA,ncol=8,nrow=10)#
for (i in 1:8){#
	xmat[,i] = rnorm(10)#
}#
#
lm(y~xmat)#
#
lm(y~xmat)%>%resid#
ynew  = rnorm(10)#
#
mean((ynew - lm(y~xmat)%>%fitted)^2)#
#
plot(ynew,lm(y~xmat)%>%fitted)
lm(y~xmat)%>%resid
y
y = rnorm(10)#
xmat = matrix(NA,ncol=9,nrow=10)#
for (i in 1:9){#
	xmat[,i] = rnorm(10)#
}#
#
lm(y~xmat)#
#
lm(y~xmat)%>%resid
set.seed(392039853)#
#
reps <- 200 # Number of data sets#
N <- 20      # Sample size#
#
# Create test data#
test <- expand.grid(x1 = c(.1,.3,.5,.7,.9), x2 = c(.1,.3,.5,.7,.9), x3=c(.1,.3,.5,.7,.9))#
#
# Create vector of true means#
mu <- test$x1 + test$x2#
#
# Prepare for looping over reps#
counter <- 1#
# Matrix to save predictions: rows are replicates, #
#   columns are different X combinations times 3 (one for each model)#
save.pred <- matrix(data=NA, ncol=3*nrow(test), nrow=reps)#
# Matrix to save estimates of sigma^2#
#   Rows are replicates, columns are different models #
save.sig <- matrix(data=NA, ncol=3, nrow=reps)#
#
# Loop to generate data, analyze, and save results#
for(counter in c(1:reps)){#
# Generating Uniform X's and Normal errors#
  x1 <- runif(n=N)#
  x2 <- runif(n=N)#
  x3 <- runif(n=N)#
  ep <- rnorm(n=N)#
# Setting beta1=1, beta2=1, beta3=0#
  y <- 1*x1 + 1*x2 + ep#
#
# reg* is model-fit object, sig* is MSE, pred* is list of predicted values over grid #
  reg1 <- lm(y~x1)#
  sig1 <- sum(resid(reg1)^2) / reg1$df.residual#
# Could have used summary(reg1)$sigma^2#
  pred1 <- predict(reg1,newdata=test)#
#
  reg2 <- lm(y~x1 + x2)#
  sig2 <- sum(resid(reg2)^2) / reg2$df.residual#
  pred2 <- predict(reg2,newdata=test)#
#
  reg3 <- lm(y~x1 + x2 + x3)#
  sig3 <- sum(resid(reg3)^2) / reg3$df.residual#
  pred3 <- predict(reg3,newdata=test)#
#
# Saving all results into storage objects and incrementing row counter#
  save.pred[counter,] <- c(pred1, pred2, pred3)#
  save.sig[counter,] <- c(sig1,sig2,sig3)#
  counter <- counter + 1#
}#
#
# Estimate bias, variance, and MSE of predictions at each X-combo#
mean.pred <- apply(save.pred, MARGIN=2, FUN=mean)#
bias <- mean.pred - rep(mu, times=3)#
var <- apply(save.pred, MARGIN=2, FUN=var)#
MSE <- bias^2 + var#
#
# Vector of model numbers#
model <- rep(c(1,2,3), each=nrow(test))#
#
# Plots#
# win.graph(height=5, width=5, pointsize=15)#
quartz()#
stripchart(bias ~ model, method="jitter", jitter=.1, vertical=TRUE, pch=20)#
abline(h=0, lty="solid")#
#
# win.graph(height=5, width=5, pointsize=15)#
quartz()#
stripchart(var ~ model, method="jitter", jitter=.1, vertical=TRUE, pch=20)#
#
# win.graph(height=5, width=5, pointsize=15)#
quartz()#
stripchart(MSE ~ model, method="jitter", jitter=.1, vertical=TRUE, pch=20)
library(datasets)
data(mtcars)
model0 =  lm(mpg~1, mtcars)
summary(model0)
modelfull = lm(mpg~.,mtcars)
summary(modelfull)
step(model0,direction="forward")
step(model0,scope=list(lower=model0,upper=modelfull),direction="forward")%>%summary
summary(step(model0,scope=list(lower=model0,upper=modelfull),direction="forward"))
23.52^2*(t(as.matrix(c(1,77,8)))%*%matrix(solve(t(xmat)%*%xmat)%>%format(.,scientific=TRUE,digits=2)%>%as.numeric,3,3)%*%as.matrix(c(1,77,8)))
quartz()
library(sFPCA)
sfpca
?load('/Users/joha/Dropbox/Yunlong/Research_ideas/supervisored_FPCA/medfly/application1/medfly.Rdata')
load('/Users/joha/Dropbox/Yunlong/Research_ideas/supervisored_FPCA/medfly/application1/medfly.Rdata')
xmat = medfly$eggcount
y = medfly$lifetime
res = sfpca(xmat,y,0.1,1e3,npc_select=5)
plot(res$beta_fd)
plot(res$beta_fd,ylab="")
plot(res$beta_fd,ylab="beta(t)")
??sfpcs_binary
library(sFPCA)
data(binary_dat)
data(medfly)#
xmat = medfly$eggcount  # 26 days and 50 flies #
y = medfly$lifetime#
res = sfpca(xmat,y,0.1,1e3,npc_select=5)#
plot(res$beta_fd,ylab="beta(t)")#
res$fitted #
res$sfpcs
data(binary_dat);xmat = binary_dat$x;y=binary_dat$y#
res = sfpcs_binary(xmat,y,npc=2,theta=1)#
res$fitted#
mean(y==res$fitted)#
res$sfpcs#
res$beta0
(demo_folder = file.path(build_dir,"sfpca_source/Demo")) # full path name
build_dir = '/Users/joha/Dropbox/Rpackages/'
(demo_folder = file.path(build_dir,"sfpca_source/Demo")) # full path name
sprintf('cp -r %s %s',demo_folder,package_dir)%>%system(,intern=TRUE)
(package_dir = file.path(build_dir,name_package))
sprintf('cp -r %s %s',demo_folder,package_dir)%>%system(,intern=TRUE)
name_package = "sFPCA"
sprintf('cp -r %s %s',demo_folder,package_dir)%>%system(,intern=TRUE)
package_dir
(package_dir = file.path(build_dir,name_package))
sprintf('cp -r %s %s',demo_folder,package_dir)%>%system(,intern=TRUE)
git_push("~/Dropbox/Rpackages/sFPCA/")
git_push("~/Dropbox/Rpackages/sFPCA/",commit=TRUE, comment="add demo")
install_github("YunlongNie/sFPCA")
library("devtools")#
#
install_github("YunlongNie/sFPCA")
library(sFPCA)
demo(sFPCA)
demo("sFPCA")
demo()
demo(package="sFPCA")
demo(package="sFPCA")
git_push("~/Dropbox/Rpackages/sFPCA/",commit=TRUE, comment="add demo")
install_github("YunlongNie/sFPCA")
library(sFPCA)
demo(package="sFPCA")
demo(demo,package="sFPCA")
demo("demo",package="sFPCA")
demo("demon",package="sFPCA")
